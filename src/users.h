#pragma once

// generated by ddl2cpp.py ./test.sql users users

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace users
{
  namespace PublicTest_
  {
    struct Uid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "uid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T uid;
            T& operator()() { return uid; }
            const T& operator()() const { return uid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Joined
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "joined";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T joined;
            T& operator()() { return joined; }
            const T& operator()() const { return joined; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
  } // namespace PublicTest_

  struct PublicTest: sqlpp::table_t<PublicTest,
               PublicTest_::Uid,
               PublicTest_::Name,
               PublicTest_::Joined>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "public.test";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T publicTest;
        T& operator()() { return publicTest; }
        const T& operator()() const { return publicTest; }
      };
    };
  };
} // namespace users
